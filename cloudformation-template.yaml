AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete AWS infrastructure for Crypto TGE Monitor with auto-scaling and monitoring'

Parameters:
  InstanceType:
    Type: String
    Default: t3.small
    AllowedValues: [t3.micro, t3.small, t3.medium, t3.large]
    Description: EC2 instance type
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
    
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
    
  PublicSubnetCidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet
    
  PrivateSubnetCidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for private subnet
    
  EmailAddress:
    Type: String
    Description: Email address for notifications
    
  RepositoryUrl:
    Type: String
    Default: ""
    Description: Git repository URL (optional)
    
  S3BucketName:
    Type: String
    Default: ""
    Description: S3 bucket for backups and config (optional - will create if empty)
  
  EnableS3Backup:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Enable S3 backup functionality (optional)

Conditions:
  CreateS3Bucket: !And 
    - !Equals [!Ref S3BucketName, ""]
    - !Equals [!Ref EnableS3Backup, "true"]
  UseS3: !Equals [!Ref EnableS3Backup, "true"]

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: crypto-tge-monitor-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: crypto-tge-monitor-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: crypto-tge-monitor-public-subnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnetCidr
      Tags:
        - Key: Name
          Value: crypto-tge-monitor-private-subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: crypto-tge-monitor-public-routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Groups
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: crypto-tge-monitor-app-sg
      GroupDescription: Security group for Crypto TGE Monitor application
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP for health checks
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS for health checks
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: crypto-tge-monitor-app-sg

  # IAM Role and Instance Profile
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: CryptoTGEMonitorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - !If
                - UseS3
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource: 
                    - !If [CreateS3Bucket, !Sub "${S3Bucket}/*", !Sub "arn:aws:s3:::${S3BucketName}/*"]
                - !Ref "AWS::NoValue"
              - !If
                - UseS3
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource: 
                    - !If [CreateS3Bucket, !Ref S3Bucket, !Sub "arn:aws:s3:::${S3BucketName}"]
                - !Ref "AWS::NoValue"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SNSTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # S3 Bucket for backups and configuration
  S3Bucket:
    Type: AWS::S3::Bucket
    Condition: CreateS3Bucket
    Properties:
      BucketName: !Sub "crypto-tge-monitor-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldBackups
            Status: Enabled
            ExpirationInDays: 90
          - Id: TransitionToIA
            Status: Enabled
            TransitionInDays: 30
            StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # SNS Topic for notifications
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: crypto-tge-monitor-alerts
      DisplayName: Crypto TGE Monitor Alerts

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref SNSTopic
      Endpoint: !Ref EmailAddress

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/crypto-tge-monitor
      RetentionInDays: 30

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: crypto-tge-monitor-template
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI (update for your region)
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref ApplicationSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            
            # Export environment variables for the deployment
            export REPO_URL="${RepositoryUrl}"
            export SNS_TOPIC_ARN="${SNSTopic}"
            export S3_BACKUP_BUCKET="${!If [UseS3, !If [CreateS3Bucket, !Ref S3Bucket, !Ref S3BucketName], '']}"
            
            # Update system
            yum update -y
            
            # Install git and aws cli
            yum install -y git aws-cli
            
            # Download and run deployment script
            cd /tmp
            if [ -n "$REPO_URL" ]; then
              git clone "$REPO_URL" crypto-tge-monitor
              cd crypto-tge-monitor
            else
              # Create a minimal deployment script if no repo is specified
              mkdir crypto-tge-monitor
              cd crypto-tge-monitor
              
              # Download the deployment script from a public location
              # For production, replace this with your actual deployment method
              cat > ec2-deploy.sh << 'EOFSCRIPT'
            #!/bin/bash
            echo "Deployment script placeholder"
            echo "Please configure your repository URL or deployment method"
            EOFSCRIPT
              chmod +x ec2-deploy.sh
            fi
            
            # Run deployment
            ./ec2-deploy.sh
            
            # Signal CloudFormation
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: crypto-tge-monitor
              - Key: Environment
                Value: production
              - Key: Application
                Value: crypto-tge-monitor

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: crypto-tge-monitor-asg
          PropagateAtLaunch: false
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: High CPU utilization
      AlarmActions:
        - !Ref SNSTopic
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup

  ServiceDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Service appears to be down
      AlarmActions:
        - !Ref SNSTopic
      MetricName: StatusCheckFailed
      Namespace: AWS/EC2
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC-ID"

  PublicSubnetId:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet-ID"

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref ApplicationSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup-ID"

  S3BucketName:
    Description: S3 Bucket for backups (if enabled)
    Value: !If [UseS3, !If [CreateS3Bucket, !Ref S3Bucket, !Ref S3BucketName], "S3 backup disabled"]
    Export:
      Name: !Sub "${AWS::StackName}-S3Bucket-Name"

  SNSTopicArn:
    Description: SNS Topic ARN for alerts
    Value: !Ref SNSTopic
    Export:
      Name: !Sub "${AWS::StackName}-SNSTopic-ARN"

  AutoScalingGroupName:
    Description: Auto Scaling Group Name
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-ASG-Name"

  LogGroupName:
    Description: CloudWatch Log Group Name
    Value: !Ref LogGroup
    Export:
      Name: !Sub "${AWS::StackName}-LogGroup-Name"