# .github/workflows/auto-review.yml
name: Automated Code Review
on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  swarm-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Flow
        run: |
          npm install -g claude-flow@alpha

      - name: Setup GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Run Code Review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          # Create review output directory
          mkdir -p reports/reviews

          # Get PR information
          echo "Reviewing PR #${PR_NUMBER}"
          gh pr view ${PR_NUMBER} --json files,title,body > pr_context.json

          # Run basic code quality checks
          echo "## 🔍 Automated Code Review" > review_output.md
          echo "" >> review_output.md

          # Check Python syntax
          echo "### Python Syntax Check" >> review_output.md
          if find . -name "*.py" -type f -exec python -m py_compile {} \; 2>&1 | tee syntax_check.log; then
            echo "✅ All Python files have valid syntax" >> review_output.md
          else
            echo "❌ Syntax errors found:" >> review_output.md
            echo '```' >> review_output.md
            cat syntax_check.log >> review_output.md
            echo '```' >> review_output.md
          fi
          echo "" >> review_output.md

          # Check for common issues
          echo "### Security & Best Practices" >> review_output.md

          # Check for hardcoded secrets
          if grep -rn --include="*.py" -E "(password|secret|key|token)\s*=\s*['\"]" . | grep -v "test" | grep -v ".env" > secrets_check.log; then
            echo "⚠️ Potential hardcoded secrets found:" >> review_output.md
            echo '```' >> review_output.md
            cat secrets_check.log >> review_output.md
            echo '```' >> review_output.md
          else
            echo "✅ No hardcoded secrets detected" >> review_output.md
          fi
          echo "" >> review_output.md

          # Check for TODO/FIXME comments
          echo "### Code Comments Review" >> review_output.md
          if grep -rn --include="*.py" -E "(TODO|FIXME|XXX|HACK)" . > comments_check.log; then
            echo "📝 Found TODO/FIXME comments:" >> review_output.md
            echo '```' >> review_output.md
            head -20 comments_check.log >> review_output.md
            echo '```' >> review_output.md
          else
            echo "✅ No pending TODOs found" >> review_output.md
          fi
          echo "" >> review_output.md

          # Code statistics
          echo "### Code Statistics" >> review_output.md
          echo "- **Total Python files**: $(find . -name '*.py' -type f | wc -l)" >> review_output.md
          echo "- **Total lines of Python code**: $(find . -name '*.py' -type f -exec wc -l {} + | tail -1 | awk '{print $1}')" >> review_output.md
          echo "- **Files changed in this PR**: $(gh pr view ${PR_NUMBER} --json files --jq '.files | length')" >> review_output.md
          echo "" >> review_output.md

          # Post review comment
          gh pr comment ${PR_NUMBER} --body-file review_output.md

          # Save review for artifacts
          cp review_output.md reports/reviews/pr_${PR_NUMBER}_review.md

      - name: Upload Review Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-review-results
          path: |
            reports/reviews/
            *.log
          retention-days: 30