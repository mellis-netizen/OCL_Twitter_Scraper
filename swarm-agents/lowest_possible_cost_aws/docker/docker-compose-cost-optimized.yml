version: '3.8'

# TGE Swarm Ultra-Low-Cost Configuration
# Cost Optimization Engineer: Claude
# Purpose: Maximum cost savings through service consolidation and resource optimization

services:
  # =========================================================================
  # ALL-IN-ONE SERVICE CONSOLIDATION
  # =========================================================================
  
  # Consolidated PostgreSQL (self-hosted for cost savings)
  postgres:
    image: postgres:15-alpine
    container_name: tge-postgres-cost-optimized
    environment:
      POSTGRES_DB: tge_swarm
      POSTGRES_USER: swarm_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-swarm_secure_pass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cost-optimized-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M  # Minimal memory allocation
          cpus: '0.2'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U swarm_user -d tge_swarm"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Consolidated Redis (single instance instead of cluster)
  redis:
    image: redis:7-alpine
    container_name: tge-redis-cost-optimized
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-redis_secure_pass}
      --maxmemory 128m
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - cost-optimized-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_secure_pass}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =========================================================================
  # CONSOLIDATED TGE SWARM SERVICES
  # =========================================================================

  # Multi-service container running Queen + Coordinator + All Agents
  tge-swarm-all-in-one:
    build:
      context: ../../..
      dockerfile: swarm-agents/lowest_possible_cost_aws/docker/Dockerfile.all-in-one
    container_name: tge-swarm-all-in-one
    environment:
      # Database configuration
      - POSTGRES_URL=postgresql://swarm_user:${POSTGRES_PASSWORD:-swarm_secure_pass}@postgres:5432/tge_swarm
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_pass}@redis:6379
      
      # Service configuration
      - ENABLE_QUEEN=true
      - ENABLE_COORDINATOR=true
      - ENABLE_ALL_AGENTS=true
      
      # Resource limits
      - MAX_CONCURRENT_TASKS=10
      - MEMORY_LIMIT=1024M
      - CPU_LIMIT=0.8
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_TO_FILE=true
      
      # Cost optimization settings
      - OPTIMIZE_FOR_COST=true
      - REDUCE_POLLING_FREQUENCY=true
      - BATCH_OPERATIONS=true
      
      # API ports
      - QUEEN_API_PORT=8080
      - COORDINATOR_PORT=8002
      - METRICS_PORT=8001
    volumes:
      - ./safla-memory:/app/safla-memory
      - ./config:/app/config
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ../../../src:/app/src:ro
      - ../../../config.py:/app/config.py:ro
    ports:
      - "8080:8080"  # Queen API
      - "8001:8001"  # Metrics
      - "8002:8002"  # Coordinator
    networks:
      - cost-optimized-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # =========================================================================
  # CONSOLIDATED MONITORING STACK
  # =========================================================================

  # Lightweight monitoring (Prometheus + Grafana in one container)
  monitoring:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: tge-monitoring-cost-optimized
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - PROMETHEUS_RETENTION_TIME=7d
      - PROMETHEUS_RETENTION_SIZE=1GB
    volumes:
      - monitoring_data:/var/lib/grafana
      - prometheus_data:/prometheus
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"  # Grafana
      - "9090:9090"  # Prometheus
    networks:
      - cost-optimized-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health && curl -f http://localhost:9090/-/healthy"]
      interval: 60s
      timeout: 10s
      retries: 3

  # =========================================================================
  # REVERSE PROXY (NGINX for cost efficiency)
  # =========================================================================

  nginx:
    image: nginx:alpine
    container_name: tge-nginx-cost-optimized
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - cost-optimized-network
    depends_on:
      - tge-swarm-all-in-one
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =========================================================================
  # BACKUP SERVICE (LOCAL ONLY)
  # =========================================================================

  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: tge-backup-cost-optimized
    environment:
      - POSTGRES_URL=postgresql://swarm_user:${POSTGRES_PASSWORD:-swarm_secure_pass}@postgres:5432/tge_swarm
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_pass}@redis:6379
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=7    # Short retention for cost
      - BACKUP_COMPRESSION=true
      - LOCAL_BACKUP_ONLY=true
    volumes:
      - ./backups:/app/backups
      - ./safla-memory:/app/safla-memory:ro
      - ./logs:/app/logs:ro
    networks:
      - cost-optimized-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # =========================================================================
  # COST MONITORING SERVICE
  # =========================================================================

  cost-monitor:
    build:
      context: .
      dockerfile: Dockerfile.cost-monitor
    container_name: tge-cost-monitor
    environment:
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - COST_THRESHOLD=150  # Alert if monthly cost exceeds $150
      - CHECK_INTERVAL=3600 # Check every hour
      - ENABLE_AUTO_SHUTDOWN=${AUTO_SHUTDOWN_ENABLED:-true}
      - SHUTDOWN_SCHEDULE=${AUTO_SHUTDOWN_SCHEDULE:-0 22 * * *}
      - STARTUP_SCHEDULE=${AUTO_STARTUP_SCHEDULE:-0 6 * * 1-5}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/app/logs
    networks:
      - cost-optimized-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

# =========================================================================
# VOLUMES (MINIMAL STORAGE)
# =========================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  monitoring_data:
    driver: local
  prometheus_data:
    driver: local

# =========================================================================
# NETWORKS (SINGLE INTERNAL NETWORK)
# =========================================================================
networks:
  cost-optimized-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24