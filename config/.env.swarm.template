# ============================================
# Swarm Coordination Configuration Template
# ============================================
# Copy this file to .env and configure for your environment
# Swarm coordination enables multi-agent orchestration via claude-flow

# ============================================
# SWARM COORDINATION SETTINGS
# ============================================

# Enable/disable swarm coordination (default: false for backward compatibility)
SWARM_ENABLED=false

# Unique session identifier for this swarm instance (auto-generated if not set)
# Format: tge-scraper-YYYYMMDD-HHMMSS
# SWARM_SESSION_ID=tge-scraper-20250112-103000

# Agent identification
SWARM_AGENT_ID=main-scraper
SWARM_AGENT_ROLE=scraping-efficiency-specialist

# Coordination features (all default to true when swarm is enabled)
SWARM_COORDINATION_ENABLED=true
SWARM_MEMORY_ENABLED=true
SWARM_RATE_LIMIT_COORD=true
SWARM_DEDUP_COORD=true

# Claude-flow command (customize if using different version or path)
CLAUDE_FLOW_CMD=npx claude-flow@alpha

# ============================================
# SWARM AGENT ROLES (Reference)
# ============================================
# Available roles from safla-swarm-config.yaml:
#
# - scraping-efficiency-specialist (primary-optimizer, critical priority)
#   Focus: scraper performance tuning, API rate limits, concurrent requests
#
# - tge-keyword-precision-specialist (accuracy-optimizer, critical priority)
#   Focus: keyword matching, false positive elimination, company matching
#
# - api-reliability-optimizer (integration-hardener, high priority)
#   Focus: error handling, retry mechanisms, circuit breakers
#
# - performance-bottleneck-eliminator (speed-optimizer, high priority)
#   Focus: CPU usage, memory leaks, async patterns, database efficiency
#
# - data-quality-enforcer (quality-gatekeeper, medium priority)
#   Focus: data validation, duplicate detection, data sanitization

# ============================================
# MULTI-AGENT DEPLOYMENT
# ============================================
# When running multiple agents, configure each with unique:
# - SWARM_AGENT_ID (e.g., scraper-1, scraper-2, twitter-monitor-1)
# - SWARM_AGENT_ROLE (from roles above)
# - Same SWARM_SESSION_ID for coordination

# Example multi-agent setup:
# Agent 1 (News Scraper):
#   SWARM_AGENT_ID=news-scraper-1
#   SWARM_AGENT_ROLE=scraping-efficiency-specialist
#
# Agent 2 (Twitter Monitor):
#   SWARM_AGENT_ID=twitter-monitor-1
#   SWARM_AGENT_ROLE=api-reliability-optimizer
#
# Agent 3 (Quality Checker):
#   SWARM_AGENT_ID=quality-checker-1
#   SWARM_AGENT_ROLE=data-quality-enforcer

# ============================================
# SWARM MEMORY CONFIGURATION
# ============================================
# Memory namespaces are automatically managed:
# - Agent-specific: swarm/{AGENT_ID}/*
# - Shared memory: swarm/shared/*
#
# Common memory keys:
# - swarm/shared/latest_cycle_results - Last monitoring cycle results
# - swarm/shared/rate_limits/{service} - Rate limit state by service
# - swarm/shared/dedup/{hash} - Deduplication data
# - swarm/shared/articles/{hash} - Cached article content

# ============================================
# COORDINATION PATTERNS
# ============================================
# The swarm integration provides:
#
# 1. Pre/Post Task Hooks
#    - Automatic task tracking and metrics
#    - Cross-agent task visibility
#
# 2. Memory Coordination
#    - Shared deduplication cache
#    - Rate limit state sharing
#    - Performance metrics aggregation
#
# 3. Post-Edit Hooks
#    - File/data modification notifications
#    - Cache invalidation coordination
#
# 4. Rate Limit Coordination
#    - Shared rate limit tracking
#    - Coordinated backoff strategies
#    - API quota management
#
# 5. Session Management
#    - Session restoration
#    - Metrics export
#    - State persistence

# ============================================
# PERFORMANCE CONSIDERATIONS
# ============================================
# Swarm coordination adds minimal overhead:
# - Hook execution: ~10-50ms per call
# - Memory operations: ~5-20ms per operation
# - Backward compatible: System works without swarm enabled
#
# Benefits:
# - Reduced duplicate work across agents
# - Coordinated rate limit management
# - Improved cache hit rates
# - Real-time performance monitoring
# - Cross-agent optimization insights

# ============================================
# TROUBLESHOOTING
# ============================================
# If swarm coordination is not working:
#
# 1. Verify claude-flow is installed:
#    npx claude-flow@alpha --version
#
# 2. Check swarm initialization:
#    npx claude-flow@alpha swarm status
#
# 3. Test hooks manually:
#    npx claude-flow@alpha hooks pre-task --description "test" --task-id "test-1"
#
# 4. View logs in:
#    - logs/crypto_monitor.log (application logs)
#    - .swarm/memory.db (swarm memory database)
#
# 5. Disable swarm if issues persist:
#    SWARM_ENABLED=false

# ============================================
# ADVANCED CONFIGURATION
# ============================================
# For advanced swarm features, see:
# - swarm-agents/safla-swarm-config.yaml (swarm topology)
# - src/swarm_integration.py (hook implementation)
# - docs/SWARM_DEPLOYMENT_COMPLETE.md (deployment guide)
